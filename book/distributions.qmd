---
editor_options: 
  chunk_output_type: console
---

```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}
library(VisualStats)
library(ggplot2)
ggplot2::theme_set(theme_vs())
set.seed(2112)
data("distributions", package = 'VisualStats')

```

# Distributions {#sec-distributions}

When working with distributions in R, each distribution has four functions, namely:

* `dXXX` - density function.
* `rXXX` - generate random number from this distribution.
* `pXXX` - returns the area to the left of the given value.
* `qXXX` - returns the quantile for the given value/area.

Where `XXX` is the distribution name (e.g. `norm`, `binom`, `t`, etc.).

The `VisualStats::plot_distributions()` function will generate four plots representing the four R 
distribution functions. For each subplot points correspond to the first parameter of the 
corresponding function (note the subplot for the random `rXXX` function does not have points
since this simply returns random values from that distribution). The arrows correspond to 
what that function will return.

The top two plots (`dXXX` and `rXXX`) plot the distribution. The bottom two plots are the
cumulative density function for the given distribution. The CDF describes the probability that a 
random variable (X) will be less than or equal to a specific value (`x`), written as 
F(x) = P(X â‰¤ x). The CDF provides a complete view of a random variable's distribution by 
accumulating probabilities up to that point.

Here is a full list of available distributions (note that the links go to the corresponding Wikipedia article).

```{r, echo=FALSE, results='hide'}
for(i in 1:nrow(distributions)) {
	fun <- get(paste0('d', distributions[i,]$function_name))
	params <- distributions[i,]$arguments |> strsplit(',')
	params <- params[[1]]
	args <- list(
		dist = distributions[i,]$function_name,
		limits = c(distributions[i,]$xmin, distributions[i,]$xmax),
		cv = c(distributions[i,]$xmin, distributions[i,]$xmax)
	)
	for(j in params) {
		param <- strsplit(j, '=')[[1]]
		param_name <- gsub(' ', '', param[1])  
		param_value <- gsub(' ', '', param[2]) |> as.numeric()
		# if(is.numeric(formals(fun)[param_name][[1]])) {
		# 	param_value <- as.numeric(param_value)
		# }
		args[[param_name]] <- param_value
	}
	args$cv <- NULL
	do.call(distribution_plot, args) + ggtitle(NULL) + theme_void()
	ggsave(paste0('images/dist_thumb_', distributions[i,]$function_name, '.png'), 
		   width = 300, height = 300, units = 'px')
}
```

```{r, echo=FALSE, results='asis'}
for(i in 1:nrow(distributions)) {
	cat(paste0('<img src="images/dist_thumb_', distributions[i,]$function_name, '.png" width="50" /> [', distributions[i,]$label, '](', distributions[i,]$Wikipedia, '): ', 
			   '`X', distributions[i,]$function_name, '`',
			   '\n\n'))
}
```



```{r}
#| label: distributions_norm
#| fig-cap: R functions for the normal distribution.
plot_distributions(dist = 'norm',
				   xvals = c(-1, 0, 0.5),
				   xmin = -4,
				   xmax = 4)
```

```{r}
#| label: distributions_binom
#| fig-cap: R functions for the binomial distribution.
plot_distributions(dist = 'binom',
				   xvals = c(1, 3),
				   xmin = 0,
				   xmax = 10,
                   args = list(size = 10, prob = 0.35))
```

The `distributions_shiny()` function will launch a Shiny application that provides an interface to use the `plot_distributions()` function interactively.

![Screenshot of the distributions Shiny application](/images/distributions_shiny_screenshot.png)



{{< include distributions_normal.qmd >}}

{{< include distributions_qq_plot.qmd >}}
