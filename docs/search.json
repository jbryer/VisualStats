[{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jbryer.github.io/VisualStats/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jbryer.github.io/VisualStats/articles/anova.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Graphical Analysis of Variance","text":"Chang, W., Cheng, J., Allaire, J.J., Sievert, C, Schloerke, B, Xie, Y, Allen, J., McPherson, J., Dipert, ., & Borges, B. (2021). shiny: Web Application Framework R. R package version 1.7.1. https://CRAN.R-project.org/package=shiny De Veaux, R.D., Velleman, P.F., & Bock, D.E. (2009). Intro Stats (4th ed). Pearson. Pruzek, R.R., & Helmreich, J.E. (2010). Elemental Graphics Analysis Variance using R Package granova. Retrieved https://api.semanticscholar.org/CorpusID:54635842 Pruzek, R.M., & Helmreich, J.E. (2014). granova: Graphical Analysis Variance. R package version 2.1. https://CRAN.R-project.org/package=granova Wickham, H. (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag.","code":""},{"path":"https://jbryer.github.io/VisualStats/articles/log_likelihood.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"The Path to Log Likelihood","text":"first consider simple linear regression. resulting linear regression line presented .  \\(R^2\\) model 0.48 , surface, appear bad. However, examining residual plot shows homoscedasticity assumption linear regression clearly violated.  proceed, want estimate parameters using numeric optimizer. optim function R implements number routines either minimize maximize parameter estimates based upon output function. ordinary least squares, wish minimize sum squared residuals (RSS). function calculates RSS given set parameters (.e. slope intercept). get parameter estimates, call optim function ols_linear function defined . see parameter estimates lm function several decimal places. rest document, use approach estimate parameter estimates simply modify metric wish optimize.","code":"linear_regression <- lm(Pass ~ Hours, data = study) linear_regression ##  ## Call: ## lm(formula = Pass ~ Hours, data = study) ##  ## Coefficients: ## (Intercept)        Hours   ##     -0.1539       0.2346 ggplot(study, aes(x = Hours, y = Pass)) +      geom_point(aes(color = factor(Pass))) +     geom_abline(slope = linear_regression$coefficients[2],                 intercept = linear_regression$coefficients[1]) +     scale_color_brewer('Pass', type = 'qual', palette = 6) study$linear_resid <- resid(linear_regression) ggplot(study, aes(x = Hours, y = linear_resid)) + geom_point() ols_linear <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     predicted <- a + b * predictor     residuals <- outcome - predicted     ss <- sum(residuals^2)     return(ss) } optim_ols_linear <- optim(     c(0, 1), # Initial values     ols_linear,     method = \"L-BFGS-B\",     predictor = study$Hours,     outcome = study$Pass ) optim_ols_linear$par ## [1] -0.1539353  0.2345956"},{"path":"https://jbryer.github.io/VisualStats/articles/log_likelihood.html","id":"minimize-residuals-for-the-logistic-function","dir":"Articles","previous_headings":"","what":"Minimize Residuals for the Logistic Function","title":"The Path to Log Likelihood","text":"Since relationship hours studies passing linear, can try non-linear method. logistic curve S shape function , surface, appear better approach.  first approach minimize sum absolute value residuals.  Examining resulting model shows approach overfit data. Next, let’s try minimizing RSS using logistic function.  certainly appears better job fitting data. Let’s examine residuals.  like , homoscedasticity assumption violated.","code":"logit <- function(x, beta0, beta1) {     return( 1 / (1 + exp(-beta0 - beta1 * x)) ) }  ggplot() +      stat_function(fun = logit, args = list(beta0 = 0, beta1 = 1)) +     xlim(-5, 5) min_abs_resid <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     p <- logit(predictor, a, b)     resid <- outcome - p     return(sum(abs(resid))) } optim_min_abs_resid <- optim(     c(0, 1), # Initial values     min_abs_resid,     method = \"L-BFGS-B\",     predictor = study$Hours,     outcome = study$Pass ) optim_min_abs_resid$par ## [1] -253.21409   67.52301 ggplot(data = study, aes(x = Hours, y = Pass)) +      geom_point(aes(color = factor(Pass))) +     geom_function(fun = logit, args = list(beta0 = optim_min_abs_resid$par[1],                                             beta1 = optim_min_abs_resid$par[2])) +     scale_color_brewer('Pass', type = 'qual', palette = 6) ols_logistic <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     p <- logit(predictor, a, b)     resid <- outcome - p     return(sum(resid^2)) } optim_ols_logistic <- optim(     c(0, 1), # Initial values     ols_logistic,     method = \"L-BFGS-B\",     predictor = study$Hours,     outcome = study$Pass      ) optim_ols_logistic$par ## [1] -3.296428  1.199072 ggplot(data = study, aes(x = Hours, y = Pass)) +      geom_point(aes(color = factor(Pass))) +     geom_function(fun = logit, args = list(beta0 = optim_ols_logistic$par[1],                                             beta1 = optim_ols_logistic$par[2])) +     scale_color_brewer('Pass', type = 'qual', palette = 6) study$predict_ols_logistic <- logit(study$Hours,                                     beta0 = optim_ols_logistic$par[1],                                     beta1 = optim_ols_logistic$par[2]) study$resid_ols_logistc <- study$Pass - study$predict_ols_logistic ggplot(study, aes(x = Hours, y = resid_ols_logistc)) + geom_point()"},{"path":"https://jbryer.github.io/VisualStats/articles/log_likelihood.html","id":"maximize-log-likelihood","dir":"Articles","previous_headings":"","what":"Maximize Log Likelihood","title":"The Path to Log Likelihood","text":"results logit function can interpreted likelihood outcome given independent (predictor) variable. Instead minimizing residuals, defined difference likelihood observed outcome, can minimize log likelihood. Note function , using log 1 - likelihood (’ll discuss ). see fit slightly different (OLS approach included dash line).  log Function. Since know outcomes either zero one, hence bounded zero one, considering values log(x) zero one. plot shows log(x) \\(0 \\leq 1x \\leq 1\\) negative, going asymptotically \\(-\\infty\\) x approaches zero.  Since \\(log(1) = 0\\), want reverse likelihood, , take \\(log(1 - likelihood)\\) smaller errors result larger log-likelihood values. put together, calculate likelihood (.e. predicted value using logistic function), log-likelihood (maximized). plot shows observed values (triangles), predicted values (squares), log-likelihood (circles). lines represent values taking log . , Pass == 0, take log 1 - likelihood; conversely Pass == 1 take log likelihood. circles line y = 0 log values. can seen, since negative wish maximize sum values achieve best fit.","code":"loglikelihood.binomial <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     p <- logit(predictor, a, b)     ll <- sum( outcome * log(p) + (1 - outcome) * log(1 - p))     return(ll) } optim_binomial <- optim_save(     c(0, 1), # Initial values     loglikelihood.binomial,     method = \"L-BFGS-B\",     control = list(fnscale = -1),     predictor = study$Hours,     outcome = study$Pass ) optim_binomial$par ## [1] -4.077575  1.504624 ggplot(data = study, aes(x = Hours, y = Pass)) +      geom_point(aes(color = factor(Pass))) +     geom_function(fun = logit, args = list(beta0 = optim_ols_logistic$par[1],                                             beta1 = optim_ols_logistic$par[2]),                   linetype = 2) +     geom_function(fun = logit, args = list(beta0 = optim_binomial$par[1],                                             beta1 = optim_binomial$par[2])) +     scale_color_brewer('Pass', type = 'qual', palette = 6) ggplot() + geom_function(fun = log) + xlim(0, 1) study$likelihood <- logit(study$Hours,                                                            beta0 = optim_binomial$par[1],                            beta1 = optim_binomial$par[2]) study$log_likelihood <- study$Pass * log(study$likelihood) +         # If Pass == 1                         (1 - study$Pass) * log(1 - study$likelihood) # If Pass == 0 ggplot(data = study, aes(x = Hours, y = Pass)) +      geom_smooth(method = 'glm', formula = y ~ x,                 method.args = list(family=binomial(link='logit')), se = FALSE, alpha = 0.2) +     geom_hline(yintercept = 0) +     geom_function(fun = logit, color = 'grey50', size = 1,                   args = list(beta0 = optim_binomial$par[1], beta1 = optim_binomial$par[2])) +     geom_segment(aes(xend = Hours, y = 1 - Pass, yend = likelihood, color = factor(Pass)), alpha = 0.5) +     geom_point(aes(y = likelihood, color = factor(Pass), shape = 'Predicted'), size = 3) +     geom_point(aes(color = factor(Pass), shape = 'Observed'), size = 3) +     geom_point(aes(y = log_likelihood, color = factor(Pass), shape = 'Log Likelihood'), size = 3) +     scale_color_brewer('Pass', type = 'qual', palette = 6)"},{"path":"https://jbryer.github.io/VisualStats/articles/log_likelihood.html","id":"assumptions","dir":"Articles","previous_headings":"","what":"Assumptions","title":"The Path to Log Likelihood","text":"Although maximizing log-likelihood provides result similar minimizing sum squared residuals using logistic function, log-likelihood doesn’t rely assumptions residuals OLS . Namely: assumption linearity dependent independent variables. Homoscedasticity (constant variance) logistic regression (linear regression). residuals normally distributed. assumption linearity independent variable(s) log-odds.  Box-Tidewell test can used check linearity predictor(s) logit. implemented car package R. looking non-significant value . number assumptions logistic regression shares OLS, namely: Outliers - check see strongly influential outliers. multicollinearity Independence observations Sufficiently large sample size","code":"lr.out <- glm(Pass ~ Hours, data = study, family = binomial(link='logit')) plot_linear_assumption_check(lr.out, n_groups = 5) study$logodds <- lr.out$linear.predictors car::boxTidwell(logodds ~ Hours, data = study) # Looking for a non-significant p-value ##  MLE of lambda Score Statistic (z) Pr(>|z|) ##              1              0.8758   0.3811 ##  ## iterations =  0"},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"ordinary-least-squares","dir":"Articles","previous_headings":"","what":"Ordinary Least Squares","title":"Visual Introduction to Maximum Likelihood Estimation","text":"ordinary least squares (OLS) regression goal minimize residual sum squares (RSS): \\[RSS=\\sum^{n}_{=1} \\left( y_{}-f(x_{})\\right)^{2}\\] \\(y_i\\) variable predicted, \\(f(x_i)\\) predicted value \\(y_i\\), \\(n\\) sample size. Figure 2 superimposes residuals scatter plot. squaring length lines accomplish two things: 1) make values summed positive (.e. line fits data perfectly RSS = 0) 2) points fall regression line contribute (geometrically ) RSS points close regression line. Figure 2 Scatter plot residuals. basic properties know regression : correlation measures strength relationship x y (see shiny app excellent visual overview correlations). correlation ranges -1 1. mean x y must fall line. slope line defined change y change x (\\(\\frac{\\Delta y}{\\Delta x}\\)). regression use ration standard deviations correlation defined \\(m = r \\frac{s_y}{s_x}\\) \\(m\\) slope, \\(r\\) correlation, \\(s\\) sample standard deviation. can easily calculate RSS various correlations (\\(r\\)) ranging -1 1. Figure 3 visualizes RSS. Figure 3. Residual sum squares. correlation correlation resulted smallest RSS -0.875. Calculating correlation R gives us -0.8676594 slope -5.3444716 close estimate . get accurate result tried smaller steps correlation (see parameter seq function ).","code":"y <- mtcars$mpg x <- mtcars$wt mean.y <- mean(y) mean.x <- mean(x) sd.y <- sd(y) sd.x <- sd(x) ols <- tibble(     r = seq(-1, 1, by = 0.025),            # Correlation     m = r * (sd.y / sd.x),                 # Slope     b = mean.y - m * mean.x                # Intercept ) %>% rowwise() %>%     mutate(ss = sum((y - (m * x + b))^2)) %>% # Sum of squares residuals     as.data.frame() datatable(ols) %>% formatRound(columns = names(ols), digits=3) ols %>% dplyr::filter(ss == min(ss)) # Select the row with the smallest sum of squares residuals ##        r         m       b       ss ## 1 -0.875 -5.389687 37.4306 278.3826"},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"minimizing-rss-algorithmically","dir":"Articles","previous_headings":"","what":"Minimizing RSS Algorithmically","title":"Visual Introduction to Maximum Likelihood Estimation","text":"approach works well correlation bounded -1 1 can easily calculate RSS bunch possible correlations. However, efficient ways finding correlation minimizes RSS trying correlations equally distributed across possible range. example, consider following simple algorithm: Calculate RSS \\(r = 0\\). Calculate RSS \\(r = 0.5\\) \\(RSS_{0.5} < RSS_{0}\\) calculate RSS \\(r = 0.75\\), else calculate RSS \\(r = -0.5%\\) can repeat procedure, essentially halving distance iteration find sufficiently small RSS. process , essence, idea numerical optimization procedures. R, optim function implements Nedler-Mead (Nedler & Mead, 1965) Limited Memory BFGS (Byrd et al, 1995) methods optimizing set parameters. former default use latter throughout document since allows specifying bounds certain parameters (e.g. consider positive values). details algorithm works beyond scope article (see interactive tutoral Ben Frederickson good introduction), instead focus algorithm . begin, must define function calculates metric optimizer going minimize (maximize). Let’s start RSS: parameters vector parameters algorithm going minimize (maximize). , slope intercept. predictor outcome parameters passed ... parameter optim function necessary us calculate RSS. can now get RSS set parameters. Small Digression order explore step algorithm, need wrap optim function capture parameters output function. optim_save1 function add two elements returned list: iterations raw list parameters output saved iterations_df data.frame containing data. can now call optim_save function residual_sum_squares function. initialize algorithm two random values intercept slope, respectively. Note using Broyden, Fletcher, Goldfarb, Shanno optimization method allows specification bounds parameter estimates use later. par parameter provides final parameter estimates. can see parameters accurate least four decimal places OLS method used lm function. took optim function 65 iterations find optimal set parameters minimized RSS. Figure 4 shows value parameters (.e. intercept slope) RSS iteration. Figure 4. Output optimizaiton procedure iteration.","code":"residual_sum_squares <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     predicted <- a + b * predictor     residuals <- outcome - predicted     ss <- sum(residuals^2)     return(ss) } residual_sum_squares(c(37, -5), mtcars$wt, mtcars$mpg) ## [1] 303.5247 optim_save <- function(par, fn, ...) {     iterations <- list()     wrap_fun <- function(parameters, ...) {         n <- length(iterations)         result <- fn(parameters, ...)         iterations[[n + 1]] <<- c(parameters, result)         return(result)     }     optim_out <- stats::optim(par, wrap_fun, ...)     optim_out$iterations <- iterations     optim_out$iterations_df <- as.data.frame(do.call(rbind, iterations))     names(optim_out$iterations_df) <- c(paste0('Param', 1:length(par)), 'Result')     optim_out$iterations_df$Iteration <- 1:nrow(optim_out$iterations_df)     return(optim_out) } optim.rss <- optim_save(     par = runif(2),     fn = residual_sum_squares,      method = \"L-BFGS-B\",     predictor = mtcars$wt,     outcome = mtcars$mpg ) optim.rss$par ## [1] 37.285116 -5.344469 lm.out <- lm(mpg ~ wt, data = mtcars) lm.out$coefficients ## (Intercept)          wt  ##   37.285126   -5.344472 df <- optim.rss$iterations_df names(df) <- c('Intercept', 'Slope', 'ResidualSumSquares', 'Iteration') df %>% melt(id.var = 'Iteration') %>%     ggplot(aes(x = Iteration, y = value, color = variable)) +     geom_point(size = 1) + geom_path() +     facet_wrap(~ variable, scales = \"free_y\", ncol = 1) +     xlab('Iteration') + ylab('') + theme(legend.position = 'none')"},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"likelihood","dir":"Articles","previous_headings":"","what":"Likelihood","title":"Visual Introduction to Maximum Likelihood Estimation","text":"Now laid groundwork finding parameters algorithmically, need introduce another way evaluating well parameters fit data, namely likelihood. First, let’s revisit OLS. Figure 5 scatter plot observations, OLS regression line blue, one observation highlighted red residual red line. OLS, square residual every observation, thereby making values positive, summing . , however, another way estimating fit doesn’t rely residuals. Figure 5. Scatter plot residuals one observation. often think probabilities areas fixed distribution. example, first car mtcars Mazda RX4 average miles per gallon 21 weighs 2620lbs. probability car miles per gallon less Mazda RX4 given data mtcars 0.5599667 depicted Figure 6. Figure 6. Probability distribution miles per gallan. probabilities, working fixed distribution, : \\[pr(data\\ |\\ distribution)\\] likelihood y-axis values (.e. density) fixed data points distributions can move, : \\[L(distribution\\ |\\ data)\\] likelihood height density function. Figure 7 depicts two likelihood two observations. mean distribution equal \\(\\beta_{wt} X + e\\) intercept (also known error term) defines standard deviation distribution. Figure 7. Likelihood car observed mpg given model parameters two observations. can calculate likelihood observation data. Unlike OLS, now want maximize sum values. Also, going use log likelihood can add instead multiplying. can now define log likelihood function: Note estimate third parameter, sigma, error term defines standard deviation normal distribution estimating likelihood. connected distribution residuals see later. can now calculate log-likelihood combination parameters.","code":"loglikelihood <- function(parameters, predictor, outcome) {     a <- parameters[1]     # intercept     b <- parameters[2]     # slope / beta coefficient     sigma <- parameters[3] # error     ll.vec <- dnorm(outcome, a + b * predictor, sigma, log = TRUE)     return(sum(ll.vec)) } loglikelihood(c(37, -5, sd(mtcars$mpg)),               predictor = mtcars$wt,               outcome = mtcars$mpg) ## [1] -91.06374"},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"maximum-likelihood-estimation","dir":"Articles","previous_headings":"","what":"Maximum Likelihood Estimation","title":"Visual Introduction to Maximum Likelihood Estimation","text":"can now use optim_save function find parameters maximize log-likelihood. Note two important parameter changes: specifying lower parameter algorithm try negative values sigma since variance negative. value control parameter indicates wish maximize values instead minimizing (default). can get results compare results lm function find match least four decimal places. Figure 8 shows estimated regression line iteration optimization procedure (left; OLS regression line blue; MLE regression line black) estimated parameters log-likelihood iterations left. Figure 8. Animation parameter estimates iteration optimization procedure. Figure 9 superimposes normal distribution log-likelihood determined. distribution centered \\(\\hat{y}\\). height distribution (.e. density) \\(y\\) likelihood. take log value get log-likelihood. log-likelihoods calculated observation summed. Maximum likelihood estimation attempting find parameters (.e. slope intercept) maximizes log-likelihood. Figure 9. Likelihood one observeration superimposed scatter plot. Figure 10 depicts likelihoods first 16 observations. Figure 10. Likelihoods first 16 observations final parameter estimates. MLE need estimate often referred error term, saw standard deviation normal distribution estimating likelihood . Figure 9 notice normal distribution id drawn vertically. likelihood estimated error, residuals. OLS often report root-mean-square deviation (RMSD, root-mean-square error, RMSE). RMSD standard deviation residuals: \\[RMSD\\  =\\  \\sqrt{\\frac{\\sum^{N}_{=1} (x_{}-\\hat{x_{}} )^{2}}{N} }\\] \\(\\) observation, \\(x_i\\) observed value, \\(\\hat{x_i}\\) estimated (predicted) value, \\(N\\) sample size. , see numerical optimizer matches RMSD within rounding error.","code":"optim.ll <- optim_save(     runif(3),                     # Random initial values     loglikelihood,                # Log-likelihood function     lower = c(-Inf, -Inf, 1.e-5), # The lower bounds for the values, note sigma (error), cannot be negative     method = \"L-BFGS-B\",     control = list(fnscale = -1), # Indicates that the maximum is desired rather than the minimum     predictor = mtcars$wt,     outcome = mtcars$mpg ) optim.ll$par[1:2] ## [1] 37.285114 -5.344468 lm.out$coefficients ## (Intercept)          wt  ##   37.285126   -5.344472 VisualStats::plot_likelihood(x = mtcars$wt,                             y = mtcars$mpg,                            pt = 2,                            intercept = optim.ll$par[1],                            slope = optim.ll$par[2],                            sigma = optim.ll$par[3]) tmp <- df %>% dplyr::filter(Iteration == nrow(df)) plots <- list() nplots <- 16 #nrow(mtcars) for(i in 1:min(nplots, nrow(mtcars))) {     a <- tmp[1,]$Intercept     b <- tmp[1,]$Slope     sigma <- tmp[1,]$Sigma     predictor <- mtcars$wt[i]     predicted.out <- a + b * predictor     outcome <- mtcars$mpg[i]     d <- dnorm(outcome, predicted.out, sigma)     plots[[i]] <- ggplot() +         stat_function(fun = dnorm,                       n = 101,                       args = list(mean = predicted.out, sd = sigma)) +         annotate(geom = 'segment', x = outcome, y = 0, xend = outcome, yend = d, color = 'red') +         annotate(geom = 'point', x = outcome, y = d, color = 'red', size = 2) +         xlim(c(min(mtcars$mpg, predicted.out - 3 * sigma),                max(mtcars$mpg, predicted.out + 3 * sigma))) +         ylim(c(0, .2)) +         ylab('') + xlab(row.names(mtcars)[i]) } plot_grid(plotlist = plots) optim.ll$par[3] ## [1] 2.949164 sqrt(sum(resid(lm.out)^2) / nrow(mtcars)) ## [1] 2.949163"},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"generalized-linear-models","dir":"Articles","previous_headings":"","what":"Generalized Linear Models","title":"Visual Introduction to Maximum Likelihood Estimation","text":"Generalized linear models (GLM) generalization OLS allows response variables (.e. dependent variables) error distribution distributed normally. generalized linear models following three characteristics: probability distribution describing outcome variable . linear model\\(\\eta = \\beta_0+\\beta_1 X_1 + \\cdots + \\beta_n X_n\\). link function relates linear model parameter outcome distribution\\(g(p) = \\eta\\) \\(p = g^{-1}(\\eta)\\). can estimate GLMs using MLE described . change log-likelihood function.","code":""},{"path":"https://jbryer.github.io/VisualStats/articles/mle.html","id":"logistic-regression","dir":"Articles","previous_headings":"","what":"Logistic Regression","title":"Visual Introduction to Maximum Likelihood Estimation","text":"Logistic regression GLM used model binary categorical variable using numerical categorical predictors. assume binomial distribution produced outcome variable therefore want model p probability success given set predictors. Instead fitting line (plane two predictors, etc. higher dimensions) wish fit data logistic function defined : \\[ \\sigma \\left( t \\right) =\\frac { { e }^{ t } }{ { e }^{ t }+1 } =\\frac { 1 }{ 1+{ e }^{ -t } }  \\] Figure 11. Logistic curve finish specifying Logistic model just need establish reasonable link function connects \\(\\eta\\) \\(p\\). variety options commonly used logit function specified : \\[logit(p) = \\log\\left(\\frac{p}{1-p}\\right),\\text{ $0\\le p \\le 1$}\\] can specify t linear combination predictors (independent variables). \\[ t = \\beta_0 + \\beta_1 x \\] logistic function can now rewritten : \\[ F\\left( x \\right) =\\frac { 1 }{ 1+{ e }^{ -\\left( { \\beta  }_{ 0 }+\\beta _{ 1 }x \\right)  } } \\] Consider following data set wish predict whether student pass exam based upon number hours studied.2. Figure 12. Boxplot hours studied passing. First, need define logit function log-likelihood function used optim function. Instead using normal distribution (using dnorm function), using binomial distribution logit link linear combination predictors. Now can call optim function get final parameter estimates. R, glm (short generalized linear models) function implements logistic regression family = binomial(link = 'logit') parameter set. See ?glm families models estimate models underlying distributions. can see estimate matches results glm rounding error.  Let’s explore process numeric optimizer. model, took 70 iterations converge resulting parameters.","code":"logistic <- function(t) {      return(1 / (1 + exp(-t)))  } ggplot() +     stat_function(fun = logistic, n = 101) +     xlim(-4, 4) + xlab('x') study <- data.frame(     Hours=c(0.50,0.75,1.00,1.25,1.50,1.75,1.75,2.00,2.25,2.50,2.75,3.00,             3.25,3.50,4.00,4.25,4.50,4.75,5.00,5.50),     Pass=c(0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1) ) logit <- function(x, beta0, beta1) {     return( 1 / (1 + exp(-beta0 - beta1 * x)) ) } loglikelihood.binomial <- function(parameters, predictor, outcome) {     a <- parameters[1] # Intercept     b <- parameters[2] # beta coefficient     p <- logit(predictor, a, b)     ll <- sum( outcome * log(p) + (1 - outcome) * log(1 - p))     return(ll) } optim.binomial <- optim_save(     c(0, 1), # Initial values     loglikelihood.binomial,     method = \"L-BFGS-B\",     control = list(fnscale = -1),     predictor = study$Hours,     outcome = study$Pass ) optim.binomial$par ## [1] -4.077575  1.504624 lr.out <- glm(Pass ~ Hours, data = study, family = binomial(link = 'logit')) lr.out$coefficients ## (Intercept)       Hours  ##   -4.077713    1.504645 # Redefine the logistic function to include parameter estimates logistic <- function(x, beta0, beta1) {     return(1 / (1 + exp(-1 * (beta0 + beta1 * x)) )) }  beta0 <- optim.binomial$par[1] beta1 <- optim.binomial$par[2]  ggplot(study, aes(x = Hours, y = Pass)) +     geom_point(aes(color = logistic(Hours, beta0, beta1) > 0.5)) +     stat_function(fun = logistic, n = 101,                    args = list(beta0 = beta0, beta1 = beta1) ) +     scale_color_hue('Predicted Pass > 0.5') +     theme(legend.position = c(0.85, 0.15))"},{"path":"https://jbryer.github.io/VisualStats/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jason Bryer. Author, maintainer. Bruce Dudek. Author.","code":""},{"path":"https://jbryer.github.io/VisualStats/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryer J, Dudek B (2022). VisualStats: Visualizations Statistical Tests. R package version 0.1.0, https://jbryer.github.io/VisualStats/.","code":"@Manual{,   title = {VisualStats: Visualizations for Statistical Tests},   author = {Jason Bryer and Bruce Dudek},   year = {2022},   note = {R package version 0.1.0},   url = {https://jbryer.github.io/VisualStats/}, }"},{"path":"https://jbryer.github.io/VisualStats/index.html","id":"visualstats-r-package-for-visualizing-statistical-tests","dir":"","previous_headings":"","what":"Visualizations for Statistical Tests","title":"Visualizations for Statistical Tests","text":"Authors: Jason Bryer, Ph.D. Bruce Dudek, Ph.D.Website: https://jbryer.github.io/VisualStats/ package contains functions Shiny applications designed visualize statistical tests. latest version can installed Github using remotes package: vignettes currently available: Shiny apps available. can run apps using shiny_demo('APP_NAME') APP_NAME list . available functions datasets: Acknowledgments: Thanks Bruce Dudek comments suggestions Jorge Cimentada’s blog post inspired build shiny application.","code":"remotes::install_github('jbryer/VisualStats') library(VisualStats) vignette(package = 'VisualStats')[['results']][,c('Item', 'Title'), drop = FALSE] #>      Item             Title                                                                 #> [1,] \"anova\"          \"Graphical Analysis of Variance (source, html)\"                       #> [2,] \"loess\"          \"Loess Regression (source, html)\"                                     #> [3,] \"log_likelihood\" \"The Path to Log Likelihood (source, html)\"                           #> [4,] \"mle\"            \"Visual Introduction to Maximum Likelihood Estimation (source, html)\" ShinyDemo::shiny_demo(package = 'VisualStats') #>       package      app #> 1 VisualStats    anova #> 2 VisualStats    loess #> 3 VisualStats      mle #> 4 VisualStats variance ls('package:VisualStats') #>  [1] \"anova_vis\"                    \"get_numeric_vars\"             \"hand_washing\"                 #>  [4] \"isBinary\"                     \"loess_vis\"                    \"logistic\"                     #>  [7] \"logit\"                        \"loglikelihood_binomial\"       \"loglikelihood_normal\"         #> [10] \"optim_save\"                   \"plot_likelihood\"              \"plot_linear_assumption_check\" #> [13] \"shiny_mle\"                    \"variance_vis\""},{"path":"https://jbryer.github.io/VisualStats/reference/VisualStats-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizations for Statistical Tests — VisualStats-package","title":"Visualizations for Statistical Tests — VisualStats-package","text":"Visualizations Statistical Tests","code":""},{"path":[]},{"path":"https://jbryer.github.io/VisualStats/reference/VisualStats-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualizations for Statistical Tests — VisualStats-package","text":"jason@bryer.org","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of Variance (ANOVA) Graphic — anova_vis","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"ggplot2 adaptation Pruzek Helmreich's granova::granova.1w function. also provides parameters customize features included plot.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"","code":"anova_vis(   Y,   group,   plot_datapoints = TRUE,   plot_group_means = TRUE,   plot_boxplot = FALSE,   plot_group_variances = TRUE,   plot_group_sd = TRUE,   plot_ms_within = TRUE,   plot_ms_between = TRUE,   plot_between_group_variances = FALSE,   plot_unit_line = TRUE,   plot_grand_mean = TRUE,   plot_sd_line = FALSE,   plot_pooled_sd = FALSE,   xlab = \"Deviation Contrast\",   ylab = \"Dependent Variable\",   grand_mean_col = \"blue\",   sd_line_col = \"maroon\",   pooled_sd_col = \"steelblue3\",   ms_within_col = \"#fdc086\",   ms_between_col = \"#7fc97f\",   box_width = 0.04,   box_color = \"grey50\",   plot_group_labels = FALSE,   ... )"},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"Y dependent variable. group independent, grouping, variable. box_width width box express percentage width x-axis.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"ggplot2 expression.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"Pruzek & Helmreich (2010). Elemental Graphics Analysis Variance using R Package granova","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/anova_vis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis of Variance (ANOVA) Graphic — anova_vis","text":"","code":"data(hand_washing) anova_vis(hand_washing$Bacterial_Counts, hand_washing$Method)"},{"path":"https://jbryer.github.io/VisualStats/reference/gaussian_errors_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapted from http://web.vu.lt/mif/a.buteikis/wp-content/uploads/PE_Book/3-4-UnivarMLE.html — gaussian_errors_vis","title":"Adapted from http://web.vu.lt/mif/a.buteikis/wp-content/uploads/PE_Book/3-4-UnivarMLE.html — gaussian_errors_vis","text":"Adapted http://web.vu.lt/mif/.buteikis/wp-content/uploads/PE_Book/3-4-UnivarMLE.html","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/gaussian_errors_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapted from http://web.vu.lt/mif/a.buteikis/wp-content/uploads/PE_Book/3-4-UnivarMLE.html — gaussian_errors_vis","text":"","code":"gaussian_errors_vis(df, ...)"},{"path":"https://jbryer.github.io/VisualStats/reference/get_numeric_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function that will return numeric columns used in the regression model. — get_numeric_vars","title":"Utility function that will return numeric columns used in the regression model. — get_numeric_vars","text":"Utility function return numeric columns used regression model.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/get_numeric_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function that will return numeric columns used in the regression model. — get_numeric_vars","text":"","code":"get_numeric_vars(glm_out)"},{"path":"https://jbryer.github.io/VisualStats/reference/hand_washing.html","id":null,"dir":"Reference","previous_headings":"","what":"Bacteria counts after various hand washing techniques. — hand_washing","title":"Bacteria counts after various hand washing techniques. — hand_washing","text":"chapter 28 De Veaux, Velleman, Bock (2009):","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/hand_washing.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bacteria counts after various hand washing techniques. — hand_washing","text":"data frame 32 ovservations 2 variables. Bacterial_Counts bacterial count washing hands Method method handwashing used","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/hand_washing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bacteria counts after various hand washing techniques. — hand_washing","text":"\"student decided investigate just effective washing soap eliminating bacteria. tested four different methods -- washing water , washing regular soap, washing antibacterial soap (ABS), spraying hands antibacterial spray () (containing 65% ethanol active ingredient). experiement consisted one experimental factor, washing Method, four levels.\"","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/hand_washing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bacteria counts after various hand washing techniques. — hand_washing","text":"De Veaux, R.D., Velleman, P.F., & Bock, D.E. (2009). Intro Stats (4th ed). Pearson.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/isBinary.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is dichotomous. — isBinary","title":"Check if a vector is dichotomous. — isBinary","text":"function checks see vector dichotomous. includes logical vectors numeric vectors contain 0s 1s.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/isBinary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is dichotomous. — isBinary","text":"","code":"isBinary(x)"},{"path":"https://jbryer.github.io/VisualStats/reference/isBinary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is dichotomous. — isBinary","text":"x vector check.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/isBinary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is dichotomous. — isBinary","text":"TRUE vector binary.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loess_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Loess Visualization — loess_vis","title":"Loess Visualization — loess_vis","text":"Loess Visualization","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loess_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loess Visualization — loess_vis","text":"","code":"loess_vis(   formula,   data,   center = median(data[, all.vars(formula)[2], drop = TRUE]),   degree = 2,   span = 0.3,   draw_loess = FALSE,   show_loess = TRUE,   xlab = all.vars(formula)[2],   ylab = all.vars(formula)[1],   ... )"},{"path":"https://jbryer.github.io/VisualStats/reference/loess_vis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loess Visualization — loess_vis","text":"","code":"data(\"faithful\") loess_vis(formula = eruptions ~ waiting, data = faithful)"},{"path":"https://jbryer.github.io/VisualStats/reference/logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Logistic Function — logistic","title":"Logistic Function — logistic","text":"Logistic Function","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logistic Function — logistic","text":"","code":"logistic(x, beta0, beta1)"},{"path":"https://jbryer.github.io/VisualStats/reference/logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logistic Function — logistic","text":"x vector values. beta0 intercept. beta1 slope.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Logit Function — logit","title":"Logit Function — logit","text":"Logit Function","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logit Function — logit","text":"","code":"logit(x, beta0, beta1)"},{"path":"https://jbryer.github.io/VisualStats/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logit Function — logit","text":"x vector values. beta0 intercept. beta1 slope.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_binomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log likelihood for a binomial distribution. — loglikelihood_binomial","title":"Calculate the log likelihood for a binomial distribution. — loglikelihood_binomial","text":"Calculate log likelihood binomial distribution.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_binomial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log likelihood for a binomial distribution. — loglikelihood_binomial","text":"","code":"loglikelihood_binomial(parameters, predictor, outcome)"},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_binomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log likelihood for a binomial distribution. — loglikelihood_binomial","text":"parameters regression parameters. Element one intercept, element two slope beta coefficient. predictor vector predictors. outcome vector outcomes.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_binomial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the log likelihood for a binomial distribution. — loglikelihood_binomial","text":"log likelihood.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_normal.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the log likelihood for a normally distributed dependent variable. — loglikelihood_normal","title":"Calculate the log likelihood for a normally distributed dependent variable. — loglikelihood_normal","text":"Calculate log likelihood normally distributed dependent variable.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the log likelihood for a normally distributed dependent variable. — loglikelihood_normal","text":"","code":"loglikelihood_normal(parameters, predictor, outcome)"},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the log likelihood for a normally distributed dependent variable. — loglikelihood_normal","text":"parameters regression parameters. Element one intercept, element two slope, element three error (root mean square error). predictor vector predictors. outcome vector outcomes.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/loglikelihood_normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the log likelihood for a normally distributed dependent variable. — loglikelihood_normal","text":"log likelihood.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/optim_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Warpper to optim to save iterations. — optim_save","title":"Warpper to optim to save iterations. — optim_save","text":"function wraps stats::optim function saves parameters likelihood estimation step algorithm.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/optim_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warpper to optim to save iterations. — optim_save","text":"","code":"optim_save(par, fn, ...)"},{"path":"https://jbryer.github.io/VisualStats/reference/optim_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warpper to optim to save iterations. — optim_save","text":"par initial parameters optimized . fn function minimized (maximized). ... parameters passed optim.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/optim_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warpper to optim to save iterations. — optim_save","text":"results optim two additional elements, iterations list values iteration algorithm iterations_df data.frame version list.","code":""},{"path":[]},{"path":"https://jbryer.github.io/VisualStats/reference/plot_likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot with likelihood superimposed. — plot_likelihood","title":"Scatter plot with likelihood superimposed. — plot_likelihood","text":"Scatter plot likelihood superimposed.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/plot_likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot with likelihood superimposed. — plot_likelihood","text":"","code":"plot_likelihood(   x,   y,   height = 0.4,   k = 4,   pt = 1,   intercept = lm(y ~ x)$coefficients[1],   slope = lm(y ~ x)$coefficients[2],   sigma = sqrt(sum(resid(lm(y ~ x))^2)/length(x)),   ... )"},{"path":"https://jbryer.github.io/VisualStats/reference/plot_likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot with likelihood superimposed. — plot_likelihood","text":"x predictor y outcome height proportion x-axis distribution occupy. , height 0.4 means width distribution occupy approximately 40 percent plot width. k number standard deviations plot pt point highlight draw likelihood . sigma root mean square error","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/plot_linear_assumption_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual plot to check the assumption that the predicted values are linearly\nrelated to the predictors. — plot_linear_assumption_check","title":"Visual plot to check the assumption that the predicted values are linearly\nrelated to the predictors. — plot_linear_assumption_check","text":"Visual plot check assumption predicted values linearly related predictors.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/plot_linear_assumption_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual plot to check the assumption that the predicted values are linearly\nrelated to the predictors. — plot_linear_assumption_check","text":"","code":"plot_linear_assumption_check(   glm_out,   n_groups,   vars = get_numeric_vars(glm_out),   na.rm = TRUE,   x_lab = \"Predicted Probabilities\",   y_lab = all.vars(glm_out$formula)[1],   x_limits = c(0, 1),   coord_equal = TRUE,   coord_flip = FALSE,   widths = NULL,   legend.position = \"bottom\",   varplot_nrow = NULL,   varplot_ncol = NULL )"},{"path":"https://jbryer.github.io/VisualStats/reference/plot_linear_assumption_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual plot to check the assumption that the predicted values are linearly\nrelated to the predictors. — plot_linear_assumption_check","text":"glm_out results logistic regression (.e. result glm). vars character vector name independent variables include. omitted, numeric variables used. widths relative widths two plots. want first plot, use widths = c(0, 1); second plot, use widths = c(1, 0). number groups use. default groups minimum six observations maximum 10 groups.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/plot_linear_assumption_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual plot to check the assumption that the predicted values are linearly\nrelated to the predictors. — plot_linear_assumption_check","text":"ggplot2 expression.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/renderRmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Render an RMarkdown file to be included in a Shiny app. — renderRmd","title":"Render an RMarkdown file to be included in a Shiny app. — renderRmd","text":"Render RMarkdown file included Shiny app.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/renderRmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render an RMarkdown file to be included in a Shiny app. — renderRmd","text":"","code":"renderRmd(path, input, envir = new.env(), quiet = TRUE)"},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a Shiny App from a Package — shiny_demo","title":"Run a Shiny App from a Package — shiny_demo","text":"shiny_demo user-friendly interface running Shiny applications R packages. package developers, simply put Shiny apps inst/shiny directory package. function find apps located installed package.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a Shiny App from a Package — shiny_demo","text":"","code":"shiny_demo(   topic,   package = NULL,   lib.loc = NULL,   verbose = getOption(\"verbose\"),   includeAllInstalled = FALSE )"},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a Shiny App from a Package — shiny_demo","text":"topic topic/app run. package package contains app run. NULL first app given topic name run. lib.loc character vector directory names R libraries, NULL. default value NULL corresponds libraries currently known. default used, loaded packages searched libraries. verbose logical. TRUE, additional diagnostics printed. includeAllInstalled logical. TRUE topic specified, Shiny apps installed packages listed.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_demo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run a Shiny App from a Package — shiny_demo","text":"Jason Bryer (jason@bryer.org)","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizing Maximum Likelihood Estimation Shiny Application — shiny_mle","title":"Visualizing Maximum Likelihood Estimation Shiny Application — shiny_mle","text":"start shiny app explore maximum likelihood estimation visually.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizing Maximum Likelihood Estimation Shiny Application — shiny_mle","text":"","code":"shiny_mle(df, default_x, default_y, ...)"},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_mle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visualizing Maximum Likelihood Estimation Shiny Application — shiny_mle","text":"http://rstudio.com/shiny","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny server. — shiny_server","title":"Shiny server. — shiny_server","text":"Shiny server.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny server. — shiny_server","text":"","code":"shiny_server(input, output, session)"},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny UI — shiny_ui","title":"Shiny UI — shiny_ui","text":"Shiny UI","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/shiny_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny UI — shiny_ui","text":"","code":"shiny_ui()"},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance Visualization — variance_vis","title":"Variance Visualization — variance_vis","text":"function adapted Bruce Dudek's Shiny app available : https://shiny.rit.albany.edu/stat/visualizess/","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance Visualization — variance_vis","text":"","code":"variance_vis(   x,   plot_mean = TRUE,   plot_deviances = TRUE,   plot_deviances_x = FALSE,   plot_deviances_y = FALSE,   plot_population_variance = TRUE,   plot_sample_variance = FALSE,   plot_population_sd = FALSE,   plot_sample_sd = FALSE,   point_size = 3,   variance_position = \"top\",   deviation_col = \"blue\",   sample_variance_col = \"green\",   population_variance_col = \"orange\",   sample_sd_col = \"darkgreen\",   population_sd_col = \"darkorange\",   sd_size = 1.5,   xlab = \"\",   ... )"},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance Visualization — variance_vis","text":"x vector values display variance . plot_deviances either logical (TRUE include cross products) integer vector indicating cross products x plotted.#' variance_position plot sample /population variances. Values can 'top', 'bottom', 'middle'.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance Visualization — variance_vis","text":"ggplot2 expression.","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variance Visualization — variance_vis","text":"Jason Bryer Bruce Dudek","code":""},{"path":"https://jbryer.github.io/VisualStats/reference/variance_vis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance Visualization — variance_vis","text":"","code":"x <- c(97.88, 107.91, 88.26, 115.21, 87.38)   variance_vis(x)"}]
