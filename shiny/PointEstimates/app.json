[{"name":"server.R","content":"library(shiny)\nlibrary(ggplot2)\n\ncols <- c('Population' = '#cfcfcf',\n\t\t  'Frequentist' = '#1b9e77',\n\t\t  'Prior' = '#7570b3',\n\t\t  'Bayesian' = '#d95f02',\n\t\t  'Bootstrap' = '#386cb0')\n\nn_bayes_samples <- 1000\nn_bootstrap_samples <- 1000\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output, session) {\n\tgetSample <- reactive({\n\t\tinput$resample\n\t\tthedata <- data.frame(i = 1:input$sampleSize,\n\t\t\t\t\t\t\t  x = rnorm(input$sampleSize,\n\t\t\t\t\t\t\t  \t\t    mean = input$populationMean,\n\t\t\t\t\t\t\t  \t\t    sd = input$populationSD),\n\t\t\t\t\t\t\t  stringsAsFactors = FALSE)\n\t\treturn(thedata)\n\t})\n\n\toutput$plot <- renderPlot({\n\t\tthedata <- getSample()\n\t\tmean_sample <- mean(thedata$x)\n\t\tsd_sample <- sd(thedata$x)\n\n\t\t# Bayesian estimates\n\t\tprior <- rnorm(n_bayes_samples, mean = 0, sd = sd_sample)\n\t\tlikfun <- function(theta) {\n\t\t\tsapply( theta, function(t) prod( dnorm(thedata$x, t, sd_sample) ) )\n\t\t\t# TODO: Re-evaluate the prior SD. For now, assuming the same SD as the sample\n\t\t}\n\t\ttmp <- likfun(prior)\n\t\tposterior <- sample(prior, n_bayes_samples, replace=TRUE, prob=tmp )\n\t\tbayes_estimate <- mean(posterior)\n\t\tbayes_interval <- quantile(posterior, c(0.025, 0.975))\n\n\t\tbootstrap_samples <- numeric(n_bootstrap_samples)\n\t\tfor(i in seq_len(n_bootstrap_samples)) {\n\t\t\ttmp <- sample(thedata$x, nrow(thedata), replace = TRUE)\n\t\t\tbootstrap_samples[i] <- mean(tmp)\n\t\t}\n\t\tbootstrap_estimate <- mean(bootstrap_samples)\n\t\tbootstrap_interval <- quantile(bootstrap_samples, c(0.025, 0.975))\n\n\t\t# Position of labels below the line y = 0\n\t\tlabel.pos.x <- max(mean_sample + 1.96 * (sd_sample) / sqrt(input$sampleSize),\n\t\t\t\t\t\t   bayes_interval[2],\n\t\t\t\t\t\t   bootstrap_interval[2])\n\n\t\t# Setup the plot\n\t\tp <- ggplot(thedata, aes(x = x)) +\n\t\t\tgeom_vline(xintercept = input$populationMean, linetype = 2) +\n\t\t\tgeom_vline(xintercept = 0) +\n\t\t\tgeom_hline(yintercept = -0.5) +\n\t\t\tgeom_vline(xintercept = mean_sample, linetype = 3) +\n\t\t\tgeom_point(y = -0.4, alpha = 0.25) +\n\t\t\txlim(min(c(input$populationMean - 3 * input$populationSD, thedata$x)),\n\t\t\t\t max(c(input$populationMean + 3 * input$populationSD, thedata$x)) )\n\n\t\tif(input$showPopulation) {\n\t\t\tp <- p +\n\t\t\t\tstat_function(fun = dnorm,\n\t\t\t\t\t\t\t  args = list(mean = input$populationMean,\n\t\t\t\t\t\t\t  \t\t\t  sd = input$populationSD),\n\t\t\t\t\t\t\t  color = cols['Population'], fill = cols['Population'],\n\t\t\t\t\t\t\t  geom = 'area', alpha = 0.25)\n\t\t}\n\n\t\t##### Frequentist\n\t\tif(input$showFrequentist) {\n\t\t\tp <- p +\n\t\t\t\tstat_function(fun = dnorm,\n\t\t\t\t\t\t\t  args = list(mean = mean_sample,\n\t\t\t\t\t\t\t  \t\t\tsd = (sd_sample) / sqrt(input$sampleSize) ),\n\t\t\t\t\t\t\t  color = cols['Frequentist'], fill = cols['Frequentist'],\n\t\t\t\t\t\t\t  geom = 'area', alpha = 0.25) +\n\t\t\t\tgeom_segment(x = mean_sample - 1.96 * (sd_sample / sqrt(input$sampleSize)),\n\t\t\t\t\t\t\t xend = mean_sample + 1.96 * (sd_sample) / sqrt(input$sampleSize),\n\t\t\t\t\t\t\t y = -0.1, yend = -0.1,\n\t\t\t\t\t\t\t color = cols['Frequentist'], alpha = 0.25, size = 1) +\n\t\t\t\tgeom_point(x = mean_sample, y = -0.1, color = cols['Frequentist'], size = 3) +\n\t\t\t\tgeom_text(x = label.pos.x, y = -0.1, hjust = -0.1, size = 4,\n\t\t\t\t\t\t  label = 'Frequentist Estimate',\n\t\t\t\t\t\t  color = cols['Frequentist'])\n\t\t}\n\n\t\t##### Boostrap\n\t\tif(input$showBootstrap) {\n\t\t\tp <- p +\n\t\t\t\tgeom_density(data = data.frame(x = bootstrap_samples),\n\t\t\t\t\t\t\t aes(x = x), alpha = 0.25,\n\t\t\t\t\t\t\t color = cols['Bootstrap'], fill = cols['Bootstrap']) +\n\t\t\t\tgeom_segment(x = bootstrap_interval[1],\n\t\t\t\t\t\t\t xend = bootstrap_interval[2],\n\t\t\t\t\t\t\t y = -0.2, yend = -0.2,\n\t\t\t\t\t\t\t color = cols['Bootstrap'], size = 1) +\n\t\t\t\tgeom_point(x = bootstrap_estimate, y = -0.2, color = cols['Bootstrap'], size = 3) +\n\t\t\t\tgeom_text(x = label.pos.x, y = -0.2, hjust = -0.1, size = 4,\n\t\t\t\t\t\t  label = 'Bootstrap Estimate', color = cols['Bootstrap'])\n\t\t}\n\n\t\t##### Bayesian\n\t\tif(input$showBayesianPrior) {\n\t\t\tp <- p +\n\t\t\t\tstat_function(fun = dnorm,\n\t\t\t\t\t\t\t  args = list(mean = 0, sd = sd_sample),\n\t\t\t\t\t\t\t  color = cols['Prior'], fill = cols['Prior'],\n\t\t\t\t\t\t\t  geom = 'area', alpha = 0.25)\n\t\t}\n\n\t\tif(input$showBayesianPosterior) {\n\t\t\tp <- p +\n\t\t\t\t# stat_function(fun = dnorm,\n\t\t\t\t# \t\t  args = list(mean = bayes_estimate, sd = sd(posterior)),\n\t\t\t\t# \t\t  color = cols['Bayesian'], fill = cols['Bayesian'],\n\t\t\t\t# \t\t  geom = 'area', alpha = 0.24) +\n\t\t\t\tgeom_density(data = data.frame(x = posterior),\n\t\t\t\t\t\t\t aes(x = x), alpha = 0.25,\n\t\t\t\t\t\t\t color = cols['Bayesian'], fill = cols['Bayesian']) +\n\t\t\t\tgeom_segment(x = bayes_interval[1],\n\t\t\t\t\t\t\t xend = bayes_interval[2],\n\t\t\t\t\t\t\t y = -0.3, yend = -0.3,\n\t\t\t\t\t\t\t color = cols['Bayesian'], size = 1) +\n\t\t\t\tgeom_point(x = bayes_estimate, y = -0.3, color = cols['Bayesian'], size = 3) +\n\t\t\t\tgeom_text(x = label.pos.x, y = -0.3, hjust = -0.1, size = 4,\n\t\t\t\t\t\t  label = 'Bayesian Estimate', color = cols['Bayesian'])\n\t\t}\n\n\t\tp <- p + ylab(\"\") + xlab('Estimate') +\n\t\t\ttheme_minimal() +\n\t\t\ttheme(axis.text.y = element_blank())\n\n\t\t##### Annotations\n\t\tif(input$showLegend) {\n\t\t\txrange <- layer_scales(p)$x$range$range\n\t\t\tyrange <- layer_scales(p)$y$range$range\n\t\t\tx_annotate <- xrange[2] - 2 * (diff(xrange) / 5)\n\t\t\ty_annotate <- yrange[2]\n\t\t\tif(input$populationMean < 0) {\n\t\t\t\tx_annotate <- xrange[1]\n\t\t\t}\n\n\t\t\tp <- p + annotate(\"text\", hjust = 0, x = x_annotate, y = y_annotate,\n\t\t\t\t\t\t label = \"Prior = P(mean difference)\", color = cols['Prior']) +\n\t\t\t\tannotate(\"text\", hjust = 0, x = x_annotate, y = y_annotate,\n\t\t\t\t\t\t label = \"\\n\\nPosterior = P(mean difference | data)\", color = cols['Bayesian']) +\n\t\t\t\tannotate(\"text\", hjust = 0, x = x_annotate, y = y_annotate,\n\t\t\t\t\t\t label = \"\\n\\n\\n\\nLikelihood = P(data | mean difference)\", color = cols['Frequentist']) +\n\t\t\t\tannotate(\"text\", hjust = 0, x = x_annotate, y = y_annotate,\n\t\t\t\t\t\t label = paste0(\"\\n\\n\\n\\n\\n\\n\\n\\nPopulation mean = \", input$populationMean,\n\t\t\t\t\t\t \t\t\t   \"\\nSample mean = \", round(mean_sample, digits = 2),\n\t\t\t\t\t\t \t\t\t   \"\\nSample SD = \", round(sd_sample, digits = 2)))\n\t\t}\n\n\t\treturn(p)\n\t})\n})\n","type":"text"},{"name":"ui.R","content":"library(shiny)\n\n# Define UI for application that draws a histogram\nshinyUI(fluidPage(\n\n  # Application title\n  titlePanel(\"Point Estimates\"),\n\n  # Sidebar with a slider input for number of bins\n  sidebarLayout(\n    sidebarPanel(\n    \tnumericInput(\"populationMean\",\n    \t\t\t\t label = \"Population Mean\",\n    \t\t\t\t value = 1),\n    \tnumericInput(\"populationSD\",\n    \t\t\t\t label = \"Population Standard Deviation\",\n    \t\t\t\t value = 1.25),\n    \tsliderInput(\"sampleSize\",\n    \t\t\t\tlabel = \"Sample Size\",\n    \t\t\t\tmin = 20, max = 100, value = 30, step = 1),\n    \tcheckboxInput(\"showPopulation\",\n    \t\t\t\t  label = \"Show Population Distribution\",\n    \t\t\t\t  value = FALSE),\n    \tcheckboxInput(\"showFrequentist\",\n    \t\t\t\t  label = \"Show Likelihood\",\n    \t\t\t\t  value = TRUE),\n    \tcheckboxInput(\"showBootstrap\",\n    \t\t\t\t  label = \"Show Bootstrap\",\n    \t\t\t\t  value = FALSE),\n    \tcheckboxInput(\"showBayesianPrior\",\n    \t\t\t\t  label = \"Show Bayesian Prior\",\n    \t\t\t\t  value = FALSE),\n    \tcheckboxInput(\"showBayesianPosterior\",\n    \t\t\t\t  label = \"Show Bayesian Posterior\",\n    \t\t\t\t  value = FALSE),\n    \tcheckboxInput(\"showLegend\",\n    \t\t\t\t  label = \"Show Legend\",\n    \t\t\t\t  value = TRUE),\n    \tactionButton(\"resample\",\n    \t\t\t\t label = \"Resample\",\n    \t\t\t\t icon = icon(\"refresh\"))\n    ),\n\n    mainPanel(\n       plotOutput(\"plot\", height = \"600px\")\n    )\n  )\n))\n","type":"text"}]
