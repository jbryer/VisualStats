[{"name":"app.R","content":"library(shiny)\nlibrary(VisualStats)\n\ncolors <- c(mean = '#66c2a5', median = '#8da0cb', sample = 'grey50')\n\n##### UI ###########################################################################################\nui <- fluidPage(\n\ttitlePanel(\"Central Limit Theorem and Bootstrapping\"),\n\n\tsidebarLayout(\n\t\tsidebarPanel(\n\t\t\tselectInput(\n\t\t\t\tinputId = 'population',\n\t\t\t\tlabel = 'Population',\n\t\t\t\tchoices = c('Binomial (right skewed)' = 'binom',\n\t\t\t\t\t\t\t'Uniform' = 'unif',\n\t\t\t\t\t\t\t'Beta (left skewed)' = 'beta',\n\t\t\t\t\t\t\t'Normal' = 'norm'),\n\t\t\t\tselected = 'beta'\n\t\t\t),\n\t\t\tselectInput(\n\t\t\t\tinputId = 'statistic',\n\t\t\t\tlabel = 'Statistic',\n\t\t\t\tchoices = c('Mean' = 'mean',\n\t\t\t\t\t\t\t'Median' = 'median'),\n\t\t\t\tselected = 'mean'\n\t\t\t),\n\t\t\t# TODO: Add options for the different distributions\n\t\t\tsliderInput(\n\t\t\t\tinputId = 'sample_size',\n\t\t\t\tlabel = 'Sample Size',\n\t\t\t\tvalue = 30,\n\t\t\t\tmin = 10,\n\t\t\t\tmax = 1000,\n\t\t\t\tstep = 10\n\t\t\t),\n\t\t\tsliderInput(\n\t\t\t\tinputId = 'n_samples',\n\t\t\t\tlabel = 'Sampling distribution size',\n\t\t\t\tvalue = 100,\n\t\t\t\tmin = 20,\n\t\t\t\tmax = 1000,\n\t\t\t\tstep = 20\n\t\t\t),\n\t\t\tsliderInput(\n\t\t\t\tinputId = 'n_boot',\n\t\t\t\tlabel = 'Number of bootstrap samples',\n\t\t\t\tvalue = 100,\n\t\t\t\tmin = 20,\n\t\t\t\tmax = 1000,\n\t\t\t\tstep = 20\n\t\t\t),\n\t\t\tsliderInput(\n\t\t\t\tinputId = 'bw_adjust',\n\t\t\t\tlabel = 'Bandwith adjust',\n\t\t\t\tmin = 0.1,\n\t\t\t\tmax = 3,\n\t\t\t\tvalue = 1,\n\t\t\t\tstep = 0.1\n\t\t\t),\n\t\t\tactionButton(\n\t\t\t\tinputId = 'resample_pop',\n\t\t\t\tlabel = 'Resample Population'\n\t\t\t),\n\t\t\tactionButton(\n\t\t\t\tinputId = 'resample_samp_dist',\n\t\t\t\tlabel = 'Resample Sampling Distribution'\n\t\t\t),\n\t\t\tactionButton(\n\t\t\t\tinputId = 'resample_boot_dist',\n\t\t\t\tlabel = 'Resample Bootstrap Distribution'\n\t\t\t)\n\t\t),\n\n\t\t# Show a plot of the generated distribution\n\t\tmainPanel(\n\t\t\ttabsetPanel(\n\t\t\t\ttabPanel(\n\t\t\t\t\ttitle = 'Population',\n\t\t\t\t\tplotOutput('population_plot')\n\t\t\t\t),\n\t\t\t\ttabPanel(\n\t\t\t\t\ttitle = 'Sampling Distribution',\n\t\t\t\t\tplotOutput('sampling_dist_plot')\n\t\t\t\t),\n\t\t\t\ttabPanel(\n\t\t\t\t\ttitle = 'Bootstrap',\n\t\t\t\t\tplotOutput('bootstrap_dist_plot')\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n)\n\n##### Server #######################################################################################\nserver <- function(input, output) {\n\tN <- 100000\n\tn_digits <- 4\n\n\tget_population <- reactive({\n\t\tinput$resample_pop\n\t\tpop <- NULL\n\t\tif(input$population == 'binom') {\n\t\t\tpop <- rnbinom(N, 10, .5)\n\t\t} else if(input$population == 'unif') {\n\t\t\tpop <- runif(N, 0, 1)\n\t\t} else if(input$population == 'beta') {\n\t\t\tpop <- rbeta(N, 5, 2)\n\t\t} else if(input$population == 'norm') {\n\t\t\tpop <- rnorm(N)\n\t\t} else {\n\t\t\tstop('Unknown population type.')\n\t\t}\n\t\treturn(pop)\n\t})\n\n\tget_sampling_dist <- reactive({\n\t\tinput$resample_samp_dist\n\t\tpop <- get_population()\n\t\tsamp_dist <- numeric(input$n_samples)\n\t\tfor(i in 1:n_samples) {\n\t\t\tsamp <- sample(pop, size = input$sample_size)\n\t\t\tsamp_dist[i] <- do.call(input$statistic, args = list(samp))\n\t\t}\n\t\treturn(samp_dist)\n\t})\n\n\tget_bootstrap_dist <- reactive({\n\t\tinput$resample_boot_dist\n\t\tpop <- get_population()\n\t\tsamp <- sample(pop, size = input$sample_size)\n\t\tboot_dist <- numeric(input$n_boot)\n\t\tfor(i in 1:length(boot_dist)) {\n\t\t\tboot_samp <- sample(samp, size = length(samp), replace = TRUE)\n\t\t\tboot_dist[i] <- do.call(input$statistic, args = list(boot_samp))\n\t\t}\n\t\treturn(list(sample = samp, boot_dist = boot_dist))\n\t})\n\n\toutput$population_plot <- renderPlot({\n\t\tpop <- get_population()\n\t\tggplot(data.frame(x = pop), aes(x = x)) +\n\t\t\tgeom_vline(xintercept = do.call(input$statistic, args = list(pop)),\n\t\t\t\t\t   color = colors[input$statistic], linewidth = 1.25) +\n\t\t\tgeom_dist(pop,\n\t\t\t\t\t  adjust = input$bw_adjust,\n\t\t\t\t\t  center_fun = NULL) +\n\t\t\tggtitle('Poulation Distribution',\n\t\t\t\t\tsubtitle = paste0(input$statistic, ' = ', round(\n\t\t\t\t\t\tdo.call(input$statistic, args = list(pop)), n_digits)))\n\t})\n\n\toutput$sampling_dist_plot <- renderPlot({\n\t\tsamp_dist <- get_sampling_dist()\n\t\tggplot() +\n\t\t\tgeom_dist(samp_dist,\n\t\t\t\t\t  color = colors[input$statistic],\n\t\t\t\t\t  adjust = input$bw_adjust) +\n\t\t\tannotate(geom = 'point',\n\t\t\t\t\t x = do.call(input$statistic, args = list(pop)),\n\t\t\t\t\t y = 0,\n\t\t\t\t\t color = colors[input$statistic],\n\t\t\t\t\t fill = colors[input$statistic],\n\t\t\t\t\t size = 4,\n\t\t\t\t\t pch = 22) +\n\t\t\tggtitle('Sampling distribution',\n\t\t\t\t\tsubtitle = paste0(input$statistic, ' = ', round(\n\t\t\t\t\t\tdo.call(input$statistic, args = list(samp_dist)), n_digits)))\n\t})\n\n\toutput$bootstrap_dist_plot <- renderPlot({\n\t\tboot_dist <- get_bootstrap_dist()\n\t\tggplot() +\n\t\t\tgeom_dist(boot_dist,\n\t\t\t\t\t  # color = colors[input$statistic],\n\t\t\t\t\t  adjust = input$bw_adjust) +\n\t\t\tannotate(geom = 'point',\n\t\t\t\t\t x =  do.call(input$statistic, args = list(pop)),\n\t\t\t\t\t y = 0,\n\t\t\t\t\t color = colors[input$statistic],\n\t\t\t\t\t fill = colors[input$statistic],\n\t\t\t\t\t size = 4,\n\t\t\t\t\t pch = 22) +\n\t\t\tggtitle('Bootstrap distribution',\n\t\t\t\t\tsubtitle = paste0(input$statistic, ' = ', round(\n\t\t\t\t\t\tdo.call(input$statistic, args = list(boot_dist$boot_dist)), n_digits)))\n\t})\n}\n\n##### Run App ######################################################################################\nshinyApp(ui = ui, server = server)\n","type":"text"}]
