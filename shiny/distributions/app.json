[{"name":"app.R","content":"library(shiny)\nlibrary(VisualStats)\n\ndistributions <- list(\n    'Normal' = list(fun = normal_plot),\n    'Chi-Squared' = list(fun = chisquare_plot),\n    'F distribution' = list(fun = F_plot)\n)\n\nui <- fluidPage(\n    titlePanel(\"Distributions\"),\n\n    sidebarLayout(\n\n        sidebarPanel(\n            selectInput('distribution',\n                        label = 'Distribution',\n                        choices = names(distributions)),\n            uiOutput('fun_params_ui'),\n            uiOutput('tails_ui'),\n            uiOutput('limits_lower_ui'),\n            uiOutput('limits_upper_ui'),\n            uiOutput('bounds_ui')\n        ),\n\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\nserver <- function(input, output) {\n    output$fun_params_ui <- renderUI({\n        params <- formals(distributions[[input$distribution]]$fun)\n        params_default <- formals(distribution_plot)\n        fun_params <- names(params)[!names(params) %in% names(params_default)]\n\n        result <- tagList()\n        for(i in fun_params) {\n            result[[i]] <- numericInput(i, label = i,\n                                        value = eval(params[[i]], params),\n                                        step = 1)\n        }\n\n        return(result)\n    })\n\n    output$bounds_ui <- renderUI({\n        req(input$tails)\n\n        params_default <- formals(distribution_plot)\n        params <- formals(distributions[[input$distribution]]$fun)\n        bounds <- eval(params$cv, envir = params)\n        limits <- eval(params$limits, envir = params)\n        if(input[['tails']] == 'no') {\n            sliderInput('bounds',\n                        label = 'Bounds',\n                        value = bounds,\n                        min = limits[1],\n                        max = limits[2],\n                        step = 0.1\n            )\n        } else {\n            sliderInput('bounds',\n                        label = 'Critical value',\n                        value = bounds[1],\n                        min = limits[1],\n                        max = limits[2],\n                        step = 0.1\n            )\n        }\n    })\n\n    output$tails_ui <- renderUI({\n        params_default <- formals(distribution_plot)\n        params <- formals(distributions[[input$distribution]]$fun)\n        selectInput('tails',\n                    'Tails',\n                    choices = eval(params_default$tails, params),\n                    selected = eval(params$tails, params))\n    })\n\n    output$limits_lower_ui <- renderUI({\n        params <- formals(distributions[[input$distribution]]$fun)\n        limits <- eval(params$limits, envir = params)\n        numericInput('limits_lower',\n                     'Lower plot limits',\n                     value = limits[1],\n                     step = 1)\n    })\n\n    output$limits_upper_ui <- renderUI({\n        params <- formals(distributions[[input$distribution]]$fun)\n        limits <- eval(params$limits, envir = params)\n        numericInput('limits_upper',\n                     'Upper plot limits',\n                     value = limits[2],\n                     step = 1)\n    })\n\n    output$distPlot <- renderPlot({\n        params <- formals(distributions[[input$distribution]]$fun)\n        params_default <- formals(distribution_plot)\n        fun_params <- names(params)[!names(params) %in% names(params_default)]\n        call_params <- list()\n        call_params[['tails']] <- input[['tails']]\n        call_params[['limits']] <- c(input[['limits_lower']], input[['limits_upper']])\n        call_params[['cv']] <- input[['bounds']]\n        for(i in fun_params) {\n            call_params[[i]] <- input[[paste0(i)]]\n        }\n        do.call(distributions[[input$distribution]]$fun, call_params)\n    })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
