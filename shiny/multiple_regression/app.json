[{"name":"app.R","content":"library(shiny)\nlibrary(VisualStats)\nlibrary(plotly)\nlibrary(ggplot2)\n\ndata(\"depression\", package = \"VisualStats\")\ndata(\"manufacturing\", package = \"VisualStats\")\ndata(\"poverty\", package = \"VisualStats\")\n\ndata_sets <- list(\n\t'depression' = depression[,c('depression', 'anxiety', 'affect')],\n\t'manufacturing' = manufacturing[,c('Strength', 'Temperature', 'Pressure')],\n\t'poverty' = poverty[,c('poverty', 'female_house', 'white')]\n)\n\nui <- shiny::fluidPage(\n    # Application title\n    shiny::titlePanel(\"Multiple Regression\"),\n\n    # Sidebar with a slider input for number of bins\n    shiny::sidebarLayout(\n    \tshiny::sidebarPanel(\n    \t\tshiny::selectInput(\n    \t\t\tinputId = 'dataset',\n    \t\t\tlabel = 'Dataset:',\n    \t\t\tchoices = names(data_sets),\n    \t\t\tselected = names(data_sets)[1]\n    \t\t),\n    \t\tshiny::selectInput(\n    \t\t\tinputId = 'regression',\n    \t\t\tlabel = 'Plot regression',\n    \t\t\tchoices = c('None', 'Regression', 'Interaction'),\n    \t\t\tselected = 'None'\n    \t\t),\n    \t\tshiny::conditionalPanel(\n    \t\t\tcondition = \"input.regression != 'None'\",\n    \t\t\tshiny::checkboxInput(\n    \t\t\t\tinputId = 'residuals',\n    \t\t\t\tlabel = 'Plot residuals',\n    \t\t\t\tvalue = FALSE\n    \t\t\t),\n    \t\t\tshiny::uiOutput('simple_slope_input')\n    \t\t),\n        ),\n\n        # Show a plot of the generated distribution\n        shiny::mainPanel(\n        \tshiny::tabsetPanel(\n        \t\tshiny::tabPanel(\n        \t\t\ttitle = 'Plot',\n        \t\t\tplotly::plotlyOutput('plot_output', height = '600px')\n        \t\t),\n        \t\tshiny::tabPanel(\n        \t\t\ttitle = 'Regression Output',\n        \t\t\tshiny::verbatimTextOutput('regression_results')\n        \t\t)\n        \t)\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\tget_data <- shiny::reactive({\n\t\treq(input$dataset)\n\t\treturn(data_sets[[input$dataset]])\n\t})\n\n\toutput$simple_slope_input <- shiny::renderUI({\n\t\tdata <- get_data()\n\t\tchoices <- c('None', names(data)[2:3])\n\t\tshiny::selectInput(\n\t\t\tinputId = 'simple_slopes',\n\t\t\tlabel = 'Add simple slopes',\n\t\t\tchoices = choices,\n\t\t\tselected = 'None'\n\t\t)\n\t})\n\n\toutput$plot_output <- plotly::renderPlotly({\n\t\treq(input$simple_slopes)\n\t\tdata <- get_data()\n\t\tplot_slopes <- NULL\n\t\tif(input$simple_slopes == names(data)[2]) {\n\t\t\tplot_slopes <- 'x1'\n\t\t} else if(input$simple_slopes == names(data)[3]) {\n\t\t\tplot_slopes <- 'x2'\n\t\t}\n\t\tplot_regression <- input$regression %in% c('Regression', 'Interaction')\n\t\tmultiple_regression_vis(\n\t\t\ty = data[,1],\n\t\t\tx1 = data[,2],\n\t\t\tx2 = data[,3],\n\t\t\ty_lab = names(data)[1],\n\t\t\tx1_lab = names(data)[2],\n\t\t\tx2_lab = names(data)[3],\n\t\t\tplot_regression = plot_regression,\n\t\t\tinteraction = input$regression == 'Interaction',\n\t\t\tplot_residuals = ifelse(plot_regression, input$residuals, FALSE),\n\t\t\tplot_slopes = plot_slopes\n\t\t)\n\t})\n\n\toutput$regression_results <- shiny::renderPrint({\n\t\tdata <- get_data()\n\t\tsign <- ifelse(input$regression == 'Interaction', ' * ', ' + ')\n\t\tformu <- as.formula(paste0(names(data)[1], ' ~ ', names(data)[2], sign, names(data)[3]))\n\t\tlm(formu, data) |> summary()\n\t})\n}\n\n# Run the application\nshiny::shinyApp(ui = ui, server = server)\n","type":"text"}]
