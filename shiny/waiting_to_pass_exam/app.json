[{"name":"app.R","content":"library(shiny)\nlibrary(ggplot2)\n\nset.seed(2112)\noptions(scipen = 999)\n\ntheme_set(theme_minimal())\n\n#' Simulate how long until a specified number of responses are correct\n#' @param size test size.\n#' @param prob probability of randomly getting correct answer\n#' @param stop_score the score on the test we wish to achieve. Value of 1\n#'        indicates a perfect score.\nsimulate_test <- function(size, p, stop_score = 1) {\n\tn <- 0\n\trepeat{\n\t\tn <- n + 1\n\t\ttest <- sample(c(TRUE, FALSE),\n\t\t\t\t\t   size = size,\n\t\t\t\t\t   prob = c(p, 1 - p),\n\t\t\t\t\t   replace = TRUE)\n\t\tif(mean(test) >= stop_score) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn(n)\n}\n\n##### UI ###########################################################################################\nui <- fluidPage(\n    titlePanel(\"How many times do I need to take a test to randomly get all questions correct?\"),\n\n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\n            \tinputId = 'test_size',\n            \tlabel = 'Number of questions',\n            \tvalue = 5,\n            \tmin = 2,\n            \tmax = 10,\n            \tstep = 1\n            ),\n            sliderInput(\n            \tinputId = 'n_options',\n            \tlabel = 'Number of question options',\n            \tvalue = 4,\n            \tmin = 2,\n            \tmax = 5\n            ),\n            sliderInput(\n            \tinputId = 'pass_rate',\n            \tlabel = 'Passing threshold',\n            \tvalue = 1,\n            \tmin = 0,\n            \tmax = 1\n            ),\n            sliderInput(\n            \tinputId = 'prob_of_success',\n            \tlabel = 'Probability of success test attempt',\n            \tvalue = 0.5,\n            \tmin = 0.01,\n            \tmax = 0.99\n            ),\n            sliderInput(\n            \tinputId = 'n_simulations',\n            \tlabel = 'Number of simulations',\n            \tvalue = 100,\n            \tmin = 20,\n            \tmax = 1000,\n            \tstep = 20\n            ),\n            actionButton(\n            \tinputId = 'run_simulation',\n            \tlabel = 'Run simulation'\n            )\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n        \ttabsetPanel(\n        \t\ttabPanel(\n        \t\t\ttitle = 'Binomial',\n        \t\t\tplotOutput('binomial_plot')\n        \t\t),\n        \t\ttabPanel(\n        \t\t\ttitle = 'Geometric',\n        \t\t\tplotOutput('geomotric_plot')\n        \t\t),\n        \t\ttabPanel(\n        \t\t\ttitle = 'Simulation',\n        \t\t\tplotOutput('simulation_plot')\n        \t\t)\n        \t)\n        )\n    )\n)\n\n##### Server #######################################################################################\nserver <- function(input, output) {\n\t# output$binoial_text <- renderText({\n\t# \tpaste0(\n\t# \t\t'The probability of getting ', (100 * input$pass_rate), '%',\n\t# \t\t' of questions correct where there is a ,' (100 * (1 / input$n_options)),\n\t# \t\t'% change of getting each question raondomly currect is ',\n\t# \t\tdbinom(x = , size = input$test_size, prob = 1 / input$n_options)\n\t# \t)\n\t# })\n\n\toutput$binomial_plot <- renderPlot({\n\t\tdist <- dbinom(x = 0:input$test_size, size = input$test_size, prob = 1 / input$n_options)\n\t\tdf <- data.frame(\n\t\t\tx = 0:input$test_size,\n\t\t\tprob = dist,\n\t\t\tlabel = paste0(round(100 * dist, digits = 2), '%'))\n\t\tggplot(df, aes(x = x, y = prob, label = label)) +\n\t\t\tgeom_bar(stat = 'identity', fill = 'grey50') +\n\t\t\tgeom_text(data = df[df$prob > 0.0001,], vjust = -0.5) +\n\t\t\tggtitle('Binomial distribution')\n\t})\n\n\toutput$geomotric_plot <- renderPlot({\n\t\tprob <- dbinom(x = input$test_size,\n\t\t\t\t\t   size = input$test_size,\n\t\t\t\t\t   prob = 1 / input$n_options)\n\t\tmax_x <- qgeom(0.99, prob = prob)\n\t\tgeom_dist <- data.frame(\n\t\t\tx = 0:max_x,\n\t\t\ty = dgeom(0:max_x, prob = prob))\n\t\tcut_point <- qgeom(input$prob_of_success, prob = prob)\n\t\tggplot(geom_dist, aes(x = x, y = y)) +\n\t\t\tgeom_polygon(data = rbind(data.frame(x = 0, y = 0),\n\t\t\t\t\t\t\t\t\t  geom_dist[geom_dist$x < cut_point,],\n\t\t\t\t\t\t\t\t\t  data.frame(x = cut_point, y = 0)),\n\t\t\t\t\t\t fill = 'grey70') +\n\t\t\tgeom_path(stat = 'identity', color = 'blue') +\n\t\t\tggtitle('Geometric distribution')\n\t})\n\n\tsimulation_result <- reactiveVal(value = NULL)\n\n\tobserveEvent(input$n_simulations | input$n_options | input$test_size, {\n\t\tsimulation_result(NULL)\n\t})\n\n\tobserveEvent(input$run_simulation, {\n\t\tisolate({\n\t\t\tsimulations <- integer(input$n_simulations)\n\t\t\tfor(i in 1:length(simulations)) {\n\t\t\t\tsimulations[i] <- simulate_test(size = input$test_size, p = 1 / input$n_options)\n\t\t\t}\n\t\t\tsimulation_result(simulations)\n\t\t})\n\t})\n\n\toutput$simulation_plot <- renderPlot({\n\t\tsimulations <- simulation_result()\n\t\tif(!is.null(simulations)) {\n\t\t\tggplot(data.frame(x = simulations), aes(x = x)) +\n\t\t\t\tgeom_histogram(aes(y = after_stat(density)), bins = 50, fill = 'grey70') +\n\t\t\t\tgeom_density(color = 'blue') +\n\t\t\t\tggtitle('Distribution of simulation results')\n\t\t}\n\t})\n}\n\n##### Run App ######################################################################################\nshinyApp(ui = ui, server = server)\n","type":"text"}]
